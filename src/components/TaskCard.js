// src/components/TaskCard.js
import React from 'react';

const TaskCard = ({ task, onDragStart, columnId }) => {
  if (!task) return null;

  // The old fields like milestone, assignee, estimatedTime, etc.,
  // are now part of task.detailsHTML generated by apiItemToKanbanTask.
  // You can choose to keep some explicit fields if they are truly common and important.
  // For this example, we'll primarily use title and detailsHTML.

  return (
    <div
      draggable
      onDragStart={(e) => onDragStart(e, task.id, columnId)}
      className="bg-white p-3 rounded-md shadow-sm border border-gray-200 mb-3 cursor-grab active:cursor-grabbing"
    >
      <div className="flex justify-between items-start mb-1">
        {/* Displaying originalId for context, could be task.taskId if you generate that */}
        <span className="text-xs font-semibold text-blue-600">
            {task.resource.toUpperCase()} ID: {task.originalId}
        </span>
      </div>
      <p className="text-sm font-medium text-gray-800 mb-2">{task.title}</p>
      
      {/* Render the pre-formatted details */}
      {task.detailsHTML && (
        <div
          className="text-xs text-gray-600 space-y-1 max-h-48 overflow-y-auto custom-scrollbar pr-1" // Added scrollbar class and max-height
          dangerouslySetInnerHTML={{ __html: task.detailsHTML }}
        />
      )}

      {/* Footer can remain if you have globally applicable task metadata */}
      {/* For example, if you add a generic 'dueDate' or 'priority' to the transformed task */}
      {/* <div className="flex items-center justify-between text-xs text-gray-500 border-t pt-2 mt-2">
        <div className="flex items-center space-x-2">
          {task.genericField1 && <span><i className="fas fa-info-circle"></i> {task.genericField1}</span>}
        </div>
        <div className="flex items-center space-x-1">
          {task.assigneeAvatar && ( // If you decide to keep assigneeAvatar generic
            <div className="w-5 h-5 bg-green-500 text-white text-xs flex items-center justify-center rounded-full font-bold">
              {task.assigneeAvatar}
            </div>
          )}
        </div>
      </div> */}
    </div>
  );
};

export default TaskCard;